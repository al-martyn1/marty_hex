/*! \file
    \brief Autogenerated enumerations (Umba Enum Gen)
 */

#pragma once


#include "marty_cpp/marty_enum.h"

#include <exception>
#include <map>
#include <stdexcept>
#include <string>
#include <unordered_map>



namespace marty{
namespace hex{

//#!HexRecordType
enum class HexRecordType : std::uint8_t
{
    data                     = 0x00 /*!<  */,
    eof                      = 0x01 /*!<  */,
    extendedSegmentAddress   = 0x02 /*!<  */,
    startSegmentAddress      = 0x03 /*!<  */,
    extendedLinearAddress    = 0x04 /*!<  */,
    startLinearAddress       = 0x05 /*!<  */

}; // enum 
//#!

MARTY_CPP_MAKE_ENUM_IS_FLAGS_FOR_NON_FLAGS_ENUM(HexRecordType)

MARTY_CPP_ENUM_CLASS_SERIALIZE_BEGIN( HexRecordType, std::map, 1 )
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( HexRecordType::startLinearAddress       , "StartLinearAddress"     );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( HexRecordType::startSegmentAddress      , "StartSegmentAddress"    );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( HexRecordType::extendedSegmentAddress   , "ExtendedSegmentAddress" );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( HexRecordType::extendedLinearAddress    , "ExtendedLinearAddress"  );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( HexRecordType::eof                      , "Eof"                    );
    MARTY_CPP_ENUM_CLASS_SERIALIZE_ITEM( HexRecordType::data                     , "Data"                   );
MARTY_CPP_ENUM_CLASS_SERIALIZE_END( HexRecordType, std::map, 1 )

MARTY_CPP_ENUM_CLASS_DESERIALIZE_BEGIN( HexRecordType, std::map, 1 )
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( HexRecordType::startLinearAddress       , "start-linear-address"     );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( HexRecordType::startLinearAddress       , "start_linear_address"     );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( HexRecordType::startLinearAddress       , "startlinearaddress"       );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( HexRecordType::startSegmentAddress      , "start-segment-address"    );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( HexRecordType::startSegmentAddress      , "start_segment_address"    );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( HexRecordType::startSegmentAddress      , "startsegmentaddress"      );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( HexRecordType::extendedSegmentAddress   , "extended-segment-address" );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( HexRecordType::extendedSegmentAddress   , "extended_segment_address" );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( HexRecordType::extendedSegmentAddress   , "extendedsegmentaddress"   );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( HexRecordType::extendedLinearAddress    , "extended-linear-address"  );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( HexRecordType::extendedLinearAddress    , "extended_linear_address"  );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( HexRecordType::extendedLinearAddress    , "extendedlinearaddress"    );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( HexRecordType::eof                      , "eof"                      );
    MARTY_CPP_ENUM_CLASS_DESERIALIZE_ITEM( HexRecordType::data                     , "data"                     );
MARTY_CPP_ENUM_CLASS_DESERIALIZE_END( HexRecordType, std::map, 1 )

} // namespace hex
} // namespace marty

